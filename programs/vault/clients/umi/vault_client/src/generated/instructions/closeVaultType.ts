/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CloseVaultTypeInstructionAccounts = {
  vaultType: PublicKey | Pda;
  authority?: Signer;
  pool: PublicKey | Pda;
  payer?: Signer;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CloseVaultTypeInstructionData = { discriminator: Uint8Array };

export type CloseVaultTypeInstructionDataArgs = {};

export function getCloseVaultTypeInstructionDataSerializer(): Serializer<
  CloseVaultTypeInstructionDataArgs,
  CloseVaultTypeInstructionData
> {
  return mapSerializer<
    CloseVaultTypeInstructionDataArgs,
    any,
    CloseVaultTypeInstructionData
  >(
    struct<CloseVaultTypeInstructionData>(
      [['discriminator', bytes({ size: 8 })]],
      { description: 'CloseVaultTypeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([214, 7, 188, 145, 85, 167, 48, 233]),
    })
  ) as Serializer<
    CloseVaultTypeInstructionDataArgs,
    CloseVaultTypeInstructionData
  >;
}

// Instruction.
export function closeVaultType(
  context: Pick<Context, 'identity' | 'payer' | 'programs'>,
  input: CloseVaultTypeInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'vault',
    'Ds1WLBK4R44S3bk1DeDiUrwxQ9ydrdjn7hkrY61EDVXF'
  );

  // Accounts.
  const resolvedAccounts = {
    vaultType: {
      index: 0,
      isWritable: true as boolean,
      value: input.vaultType ?? null,
    },
    authority: {
      index: 1,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    pool: { index: 2, isWritable: false as boolean, value: input.pool ?? null },
    payer: {
      index: 3,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    systemProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCloseVaultTypeInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
