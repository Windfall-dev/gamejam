/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type VaultType = Account<VaultTypeAccountData>;

export type VaultTypeAccountData = {
  discriminator: Uint8Array;
  /** The pubkey of the authority (usually the owner). */
  authority: PublicKey;
  /** The pubkey of the token mint to be deposited to vaults. */
  mint: PublicKey;
  /** The pubkey of the pool token account where deposited tokens are collected. */
  pool: PublicKey;
  /** The pubkey of the token program (spl_token or spl_token_2022). */
  tokenProgram: PublicKey;
  /** The start timestamp of the current season. */
  seasonStart: bigint;
  /** The duration of each season in seconds. */
  seasonDuration: bigint;
  /** The duration of the cooldown period at the end of each season, in seconds. */
  cooldownWindow: bigint;
  /** The maximum amount of tokens that can be deposited to each vault. No limit if 0. */
  maxDepositPerUser: bigint;
  /** The total amount of tokens deposited across all vaults belonging to this vault type. */
  totalDeposit: bigint;
  /**
   * If true, users can instantly deactivate their vaults to Inactive state.
   * Otherwise, vaults enter Deactivating state and can transition to Inactive at the start of next season.
   */
  instantDeactivation: boolean;
  /** The bump seed of this pda. */
  bump: number;
};

export type VaultTypeAccountDataArgs = {
  /** The pubkey of the authority (usually the owner). */
  authority: PublicKey;
  /** The pubkey of the token mint to be deposited to vaults. */
  mint: PublicKey;
  /** The pubkey of the pool token account where deposited tokens are collected. */
  pool: PublicKey;
  /** The pubkey of the token program (spl_token or spl_token_2022). */
  tokenProgram: PublicKey;
  /** The start timestamp of the current season. */
  seasonStart: number | bigint;
  /** The duration of each season in seconds. */
  seasonDuration: number | bigint;
  /** The duration of the cooldown period at the end of each season, in seconds. */
  cooldownWindow: number | bigint;
  /** The maximum amount of tokens that can be deposited to each vault. No limit if 0. */
  maxDepositPerUser: number | bigint;
  /** The total amount of tokens deposited across all vaults belonging to this vault type. */
  totalDeposit: number | bigint;
  /**
   * If true, users can instantly deactivate their vaults to Inactive state.
   * Otherwise, vaults enter Deactivating state and can transition to Inactive at the start of next season.
   */
  instantDeactivation: boolean;
  /** The bump seed of this pda. */
  bump: number;
};

export function getVaultTypeAccountDataSerializer(): Serializer<
  VaultTypeAccountDataArgs,
  VaultTypeAccountData
> {
  return mapSerializer<VaultTypeAccountDataArgs, any, VaultTypeAccountData>(
    struct<VaultTypeAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['pool', publicKeySerializer()],
        ['tokenProgram', publicKeySerializer()],
        ['seasonStart', i64()],
        ['seasonDuration', i64()],
        ['cooldownWindow', i64()],
        ['maxDepositPerUser', u64()],
        ['totalDeposit', u64()],
        ['instantDeactivation', bool()],
        ['bump', u8()],
      ],
      { description: 'VaultTypeAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([251, 71, 249, 103, 117, 71, 62, 101]),
    })
  ) as Serializer<VaultTypeAccountDataArgs, VaultTypeAccountData>;
}

export function deserializeVaultType(rawAccount: RpcAccount): VaultType {
  return deserializeAccount(rawAccount, getVaultTypeAccountDataSerializer());
}

export async function fetchVaultType(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<VaultType> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'VaultType');
  return deserializeVaultType(maybeAccount);
}

export async function safeFetchVaultType(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<VaultType | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeVaultType(maybeAccount) : null;
}

export async function fetchAllVaultType(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<VaultType[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'VaultType');
    return deserializeVaultType(maybeAccount);
  });
}

export async function safeFetchAllVaultType(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<VaultType[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeVaultType(maybeAccount as RpcAccount));
}

export function getVaultTypeGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'vault',
    'Ds1WLBK4R44S3bk1DeDiUrwxQ9ydrdjn7hkrY61EDVXF'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      mint: PublicKey;
      pool: PublicKey;
      tokenProgram: PublicKey;
      seasonStart: number | bigint;
      seasonDuration: number | bigint;
      cooldownWindow: number | bigint;
      maxDepositPerUser: number | bigint;
      totalDeposit: number | bigint;
      instantDeactivation: boolean;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      pool: [72, publicKeySerializer()],
      tokenProgram: [104, publicKeySerializer()],
      seasonStart: [136, i64()],
      seasonDuration: [144, i64()],
      cooldownWindow: [152, i64()],
      maxDepositPerUser: [160, u64()],
      totalDeposit: [168, u64()],
      instantDeactivation: [176, bool()],
      bump: [177, u8()],
    })
    .deserializeUsing<VaultType>((account) => deserializeVaultType(account))
    .whereField(
      'discriminator',
      new Uint8Array([251, 71, 249, 103, 117, 71, 62, 101])
    );
}

export function getVaultTypeSize(): number {
  return 178;
}
