/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  VaultStatus,
  VaultStatusArgs,
  getVaultStatusSerializer,
} from '../types';

export type Vault = Account<VaultAccountData>;

export type VaultAccountData = {
  discriminator: Uint8Array;
  /** The pubkey of the authority (usually the user). */
  userAuthority: PublicKey;
  /** The pubkey of the vault type. */
  vaultType: PublicKey;
  /** The amount of token the user has deposited. */
  amount: bigint;
  /** The timestamp when the vault becomes inactive. */
  inactiveAt: bigint;
  /** Current vault status. */
  status: VaultStatus;
  /** The bump seed of this pda. */
  bump: number;
};

export type VaultAccountDataArgs = {
  /** The pubkey of the authority (usually the user). */
  userAuthority: PublicKey;
  /** The pubkey of the vault type. */
  vaultType: PublicKey;
  /** The amount of token the user has deposited. */
  amount: number | bigint;
  /** The timestamp when the vault becomes inactive. */
  inactiveAt: number | bigint;
  /** Current vault status. */
  status: VaultStatusArgs;
  /** The bump seed of this pda. */
  bump: number;
};

export function getVaultAccountDataSerializer(): Serializer<
  VaultAccountDataArgs,
  VaultAccountData
> {
  return mapSerializer<VaultAccountDataArgs, any, VaultAccountData>(
    struct<VaultAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['userAuthority', publicKeySerializer()],
        ['vaultType', publicKeySerializer()],
        ['amount', u64()],
        ['inactiveAt', i64()],
        ['status', getVaultStatusSerializer()],
        ['bump', u8()],
      ],
      { description: 'VaultAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([211, 8, 232, 43, 2, 152, 117, 119]),
    })
  ) as Serializer<VaultAccountDataArgs, VaultAccountData>;
}

export function deserializeVault(rawAccount: RpcAccount): Vault {
  return deserializeAccount(rawAccount, getVaultAccountDataSerializer());
}

export async function fetchVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Vault> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Vault');
  return deserializeVault(maybeAccount);
}

export async function safeFetchVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Vault | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeVault(maybeAccount) : null;
}

export async function fetchAllVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Vault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Vault');
    return deserializeVault(maybeAccount);
  });
}

export async function safeFetchAllVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Vault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeVault(maybeAccount as RpcAccount));
}

export function getVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'vault',
    'Ds1WLBK4R44S3bk1DeDiUrwxQ9ydrdjn7hkrY61EDVXF'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      userAuthority: PublicKey;
      vaultType: PublicKey;
      amount: number | bigint;
      inactiveAt: number | bigint;
      status: VaultStatusArgs;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      userAuthority: [8, publicKeySerializer()],
      vaultType: [40, publicKeySerializer()],
      amount: [72, u64()],
      inactiveAt: [80, i64()],
      status: [88, getVaultStatusSerializer()],
      bump: [89, u8()],
    })
    .deserializeUsing<Vault>((account) => deserializeVault(account))
    .whereField(
      'discriminator',
      new Uint8Array([211, 8, 232, 43, 2, 152, 117, 119])
    );
}

export function getVaultSize(): number {
  return 90;
}
