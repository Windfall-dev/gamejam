/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_VAULT_TYPE_DISCRIMINATOR = new Uint8Array([
  214, 7, 188, 145, 85, 167, 48, 233,
]);

export function getCloseVaultTypeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_VAULT_TYPE_DISCRIMINATOR
  );
}

export type CloseVaultTypeInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVaultType extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVaultType extends string
        ? WritableAccount<TAccountVaultType>
        : TAccountVaultType,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseVaultTypeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseVaultTypeInstructionDataArgs = {};

export function getCloseVaultTypeInstructionDataEncoder(): Encoder<CloseVaultTypeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_VAULT_TYPE_DISCRIMINATOR })
  );
}

export function getCloseVaultTypeInstructionDataDecoder(): Decoder<CloseVaultTypeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseVaultTypeInstructionDataCodec(): Codec<
  CloseVaultTypeInstructionDataArgs,
  CloseVaultTypeInstructionData
> {
  return combineCodec(
    getCloseVaultTypeInstructionDataEncoder(),
    getCloseVaultTypeInstructionDataDecoder()
  );
}

export type CloseVaultTypeInput<
  TAccountVaultType extends string = string,
  TAccountAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  vaultType: Address<TAccountVaultType>;
  authority: TransactionSigner<TAccountAuthority>;
  pool: Address<TAccountPool>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseVaultTypeInstruction<
  TAccountVaultType extends string,
  TAccountAuthority extends string,
  TAccountPool extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: CloseVaultTypeInput<
    TAccountVaultType,
    TAccountAuthority,
    TAccountPool,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseVaultTypeInstruction<
  TProgramAddress,
  TAccountVaultType,
  TAccountAuthority,
  TAccountPool,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vaultType: { value: input.vaultType ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vaultType),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseVaultTypeInstructionDataEncoder().encode({}),
  } as CloseVaultTypeInstruction<
    TProgramAddress,
    TAccountVaultType,
    TAccountAuthority,
    TAccountPool,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCloseVaultTypeInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vaultType: TAccountMetas[0];
    authority: TAccountMetas[1];
    pool: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CloseVaultTypeInstructionData;
};

export function parseCloseVaultTypeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseVaultTypeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vaultType: getNextAccount(),
      authority: getNextAccount(),
      pool: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseVaultTypeInstructionDataDecoder().decode(instruction.data),
  };
}
