/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DEPOSIT_DISCRIMINATOR = new Uint8Array([
  242, 35, 198, 137, 82, 225, 242, 182,
]);

export function getDepositDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DEPOSIT_DISCRIMINATOR);
}

export type DepositInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultType extends string | IAccountMeta<string> = string,
  TAccountUserAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountFrom extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultType extends string
        ? WritableAccount<TAccountVaultType>
        : TAccountVaultType,
      TAccountUserAuthority extends string
        ? ReadonlySignerAccount<TAccountUserAuthority> &
            IAccountSignerMeta<TAccountUserAuthority>
        : TAccountUserAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountFrom extends string
        ? WritableAccount<TAccountFrom>
        : TAccountFrom,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type DepositInstructionDataArgs = { amount: number | bigint };

export function getDepositInstructionDataEncoder(): Encoder<DepositInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_DISCRIMINATOR })
  );
}

export function getDepositInstructionDataDecoder(): Decoder<DepositInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getDepositInstructionDataCodec(): Codec<
  DepositInstructionDataArgs,
  DepositInstructionData
> {
  return combineCodec(
    getDepositInstructionDataEncoder(),
    getDepositInstructionDataDecoder()
  );
}

export type DepositAsyncInput<
  TAccountVault extends string = string,
  TAccountVaultType extends string = string,
  TAccountUserAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountPool extends string = string,
  TAccountFrom extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  vault?: Address<TAccountVault>;
  vaultType: Address<TAccountVaultType>;
  userAuthority: TransactionSigner<TAccountUserAuthority>;
  mint: Address<TAccountMint>;
  pool?: Address<TAccountPool>;
  from: Address<TAccountFrom>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: DepositInstructionDataArgs['amount'];
};

export async function getDepositInstructionAsync<
  TAccountVault extends string,
  TAccountVaultType extends string,
  TAccountUserAuthority extends string,
  TAccountMint extends string,
  TAccountPool extends string,
  TAccountFrom extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: DepositAsyncInput<
    TAccountVault,
    TAccountVaultType,
    TAccountUserAuthority,
    TAccountMint,
    TAccountPool,
    TAccountFrom,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DepositInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountVaultType,
    TAccountUserAuthority,
    TAccountMint,
    TAccountPool,
    TAccountFrom,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    vaultType: { value: input.vaultType ?? null, isWritable: true },
    userAuthority: { value: input.userAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    from: { value: input.from ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.vaultType.value)),
        getAddressEncoder().encode(expectAddress(accounts.userAuthority.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.vaultType.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultType),
      getAccountMeta(accounts.userAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDepositInstructionDataEncoder().encode(
      args as DepositInstructionDataArgs
    ),
  } as DepositInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountVaultType,
    TAccountUserAuthority,
    TAccountMint,
    TAccountPool,
    TAccountFrom,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type DepositInput<
  TAccountVault extends string = string,
  TAccountVaultType extends string = string,
  TAccountUserAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountPool extends string = string,
  TAccountFrom extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  vault: Address<TAccountVault>;
  vaultType: Address<TAccountVaultType>;
  userAuthority: TransactionSigner<TAccountUserAuthority>;
  mint: Address<TAccountMint>;
  pool: Address<TAccountPool>;
  from: Address<TAccountFrom>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: DepositInstructionDataArgs['amount'];
};

export function getDepositInstruction<
  TAccountVault extends string,
  TAccountVaultType extends string,
  TAccountUserAuthority extends string,
  TAccountMint extends string,
  TAccountPool extends string,
  TAccountFrom extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: DepositInput<
    TAccountVault,
    TAccountVaultType,
    TAccountUserAuthority,
    TAccountMint,
    TAccountPool,
    TAccountFrom,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountVaultType,
  TAccountUserAuthority,
  TAccountMint,
  TAccountPool,
  TAccountFrom,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    vaultType: { value: input.vaultType ?? null, isWritable: true },
    userAuthority: { value: input.userAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    from: { value: input.from ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultType),
      getAccountMeta(accounts.userAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDepositInstructionDataEncoder().encode(
      args as DepositInstructionDataArgs
    ),
  } as DepositInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountVaultType,
    TAccountUserAuthority,
    TAccountMint,
    TAccountPool,
    TAccountFrom,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedDepositInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vault: TAccountMetas[0];
    vaultType: TAccountMetas[1];
    userAuthority: TAccountMetas[2];
    mint: TAccountMetas[3];
    pool: TAccountMetas[4];
    from: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: DepositInstructionData;
};

export function parseDepositInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      vaultType: getNextAccount(),
      userAuthority: getNextAccount(),
      mint: getNextAccount(),
      pool: getNextAccount(),
      from: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDepositInstructionDataDecoder().decode(instruction.data),
  };
}
