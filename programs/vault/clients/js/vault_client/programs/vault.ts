/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCloseVaultInstruction,
  type ParsedCloseVaultTypeInstruction,
  type ParsedDeactivateInstruction,
  type ParsedDepositInstruction,
  type ParsedNewVaultInstruction,
  type ParsedNewVaultTypeInstruction,
  type ParsedRollOverVaultTypeInstruction,
  type ParsedTransferFromPoolInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const VAULT_PROGRAM_ADDRESS =
  'Ds1WLBK4R44S3bk1DeDiUrwxQ9ydrdjn7hkrY61EDVXF' as Address<'Ds1WLBK4R44S3bk1DeDiUrwxQ9ydrdjn7hkrY61EDVXF'>;

export enum VaultAccount {
  Vault,
  VaultType,
}

export function identifyVaultAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VaultAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 8, 232, 43, 2, 152, 117, 119])
      ),
      0
    )
  ) {
    return VaultAccount.Vault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 71, 249, 103, 117, 71, 62, 101])
      ),
      0
    )
  ) {
    return VaultAccount.VaultType;
  }
  throw new Error(
    'The provided account could not be identified as a vault account.'
  );
}

export enum VaultInstruction {
  CloseVault,
  CloseVaultType,
  Deactivate,
  Deposit,
  NewVault,
  NewVaultType,
  RollOverVaultType,
  TransferFromPool,
  Withdraw,
}

export function identifyVaultInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VaultInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([141, 103, 17, 126, 72, 75, 29, 29])
      ),
      0
    )
  ) {
    return VaultInstruction.CloseVault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([214, 7, 188, 145, 85, 167, 48, 233])
      ),
      0
    )
  ) {
    return VaultInstruction.CloseVaultType;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([44, 112, 33, 172, 113, 28, 142, 13])
      ),
      0
    )
  ) {
    return VaultInstruction.Deactivate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return VaultInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 196, 119, 39, 154, 60, 10, 44])
      ),
      0
    )
  ) {
    return VaultInstruction.NewVault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 230, 146, 235, 63, 19, 186, 29])
      ),
      0
    )
  ) {
    return VaultInstruction.NewVaultType;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 161, 46, 228, 96, 94, 245, 57])
      ),
      0
    )
  ) {
    return VaultInstruction.RollOverVaultType;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 167, 45, 66, 74, 252, 0, 16])
      ),
      0
    )
  ) {
    return VaultInstruction.TransferFromPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return VaultInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a vault instruction.'
  );
}

export type ParsedVaultInstruction<
  TProgram extends string = 'Ds1WLBK4R44S3bk1DeDiUrwxQ9ydrdjn7hkrY61EDVXF',
> =
  | ({
      instructionType: VaultInstruction.CloseVault;
    } & ParsedCloseVaultInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.CloseVaultType;
    } & ParsedCloseVaultTypeInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Deactivate;
    } & ParsedDeactivateInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.NewVault;
    } & ParsedNewVaultInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.NewVaultType;
    } & ParsedNewVaultTypeInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.RollOverVaultType;
    } & ParsedRollOverVaultTypeInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.TransferFromPool;
    } & ParsedTransferFromPoolInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
